#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <math.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR,
    FILE_WRITING_ERROR,
    FILE_CLOSING_ERROR,
    MEMORY_ALLOCATION_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка записи файла",
        "Ошибка закрытия файла",
        "Ошибка выделения памяти",
        "Неизвестная ошибка, что-то пошло не так"
};

double* polynomial_decomposition(double epsilon, double a, int degree, ...)
{
    double* result = (double*)malloc((degree + 1) * sizeof(double));
    if (result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }
    double* coefficients = (double*)malloc((degree + 1) * sizeof(double));
    if (coefficients == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }
    double* powers = (double*)malloc((degree + 1) * sizeof(double));
    if (powers == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }


    // Получение всех коэффициентов многочлена из аргументов переменной длины
    va_list args;
    va_start(args, degree);
    for (int i = 0; i <= degree; i++) {
        coefficients[i] = va_arg(args, double);
    }
    va_end(args);

    // Инициализация результирующего многочлена нулевыми значениями коэффициентов
    for (int i = 0; i < degree + 1; i++) {
        result[i] = 0.0;
        powers[i] = i;
    }

    // Вычисление коэффициентов результирующего многочлена

    for(int i = 0; i < degree + 1; i++) {
        for(int j = 0; j < degree + 1; j++) {
            result[i] += coefficients[j] * pow(a,powers[j]);
            coefficients[j] = coefficients[j] * powers[j];
            if(powers[j] != 0) powers[j] -= 1;
        }

        for(int j = 1; j < i + 1; j++) {
            result[i] /= j;
        }
    }

    // Проверка точности и обнуление коэффициентов многочлена с низкими значениями
    for (int i = degree; i >= 0; i--) {
        if (fabs(result[i]) < epsilon) {
            result[i] = 0.0;
        } else {
            break;
        }
    }

    free(coefficients);
    free(powers);

    return result;
}

// Пример работы программы
int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    double epsilon = 0.000000000001;  // Точность
    double a = 2.0;             // Значение a
    int degree = 3;             // Степень многочлена
    double f0 = 2.0, f1 = -2.0, f2 = 2.0, f3 = 2.0;  // Коэффициенты многочлена

    // Вызов функции переразложения многочлена
    double* result = polynomial_decomposition(epsilon, a, degree, f0, f1, f2, f3);

    // Вывод коэффициентов результирующего многочлена
    printf("Коэффициенты результирующего многочлена:\n");
    for (int i = 0; i <= degree; i++) {
        printf("g%d = %lf\n", i, result[i]);
    }

    free(result);

    return SUCCESS;
}
