#include <stdio.h>
#include <stdlib.h>
//#include <string.h>
#include <ctype.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_NUMBER_INPUT,
    INCORRECT_FLAG_INPUT,
    INCORRECT_NUMBER_ARGUMENTS_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR,
    FILE_WRITING_ERROR,
    FILE_CLOSING_ERROR,
    MEMORY_ALLOCATION_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректный ввод числа, попробуйте ещё раз",
        "Некорректный ввод флага, попробуйте ещё раз",
        "Некорректное кол-во аргументов, попробуйте ещё раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка записи файла",
        "Ошибка закрытия файла",
        "Ошибка выделения памяти",
        "Неизвестная ошибка, что-то пошло не так"
};

char* calculate_length(const char* str) {
    int length = 0;
    const char* p = str;

    while (*p != '\0') {
        length++;
        p++;
    }

    char* result = (char*)malloc(length * sizeof(char) + 1);

    if (result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    sprintf(result, "%d", length);
    return result;
}

char* reverse_string(const char* str) {
    int length = 0;
    const char* p = str;

    while (*p != '\0') {
        length++;
        p++;
    }

    char* result = (char*)malloc(length * sizeof(char) + 1);

    if(result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    const char* q = str + length - 1;
    char* r = result;

    while (q >= str) {
        *r = *q;
        q--;
        r++;
    }

    *r = '\0';
    return result;
}

char* convert_to_uppercase(const char* str) {
    int length = 0;
    const char* p = str;

    while (*p != '\0') {
        length++;
        p++;
    }

    char* result = (char*)malloc(length * sizeof(char) + 1);


    if(result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    const char* q = str;
    char* r = result;

    while (*q != '\0') {
        if ((q - str) % 2 != 0) {
            *r = toupper(*q);
        }
        else {
            *r = *q;
        }
        q++;
        r++;
    }

    *r = '\0';
    return result;
}

char* transform_string(const char* str) {
    int length = 0;
    const char* p = str;

    while (*p != '\0') {
        length++;
        p++;
    }


    char* result = (char*)malloc(length * sizeof(char) + 1);

    if(result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    char* digit_ptr = result;

    int boolIndicator = 1;

    while(boolIndicator) {

    const char* strCopy = str;

        while (*strCopy != '\0') {
            if (isdigit(*strCopy) && boolIndicator == 1) {
                *digit_ptr = *strCopy;
                digit_ptr++;
            } else if (isalpha(*strCopy) && boolIndicator == 2) {
                *digit_ptr = *strCopy;
                digit_ptr++;
            } else if ((boolIndicator == 3 || boolIndicator == -1) && !isdigit(*strCopy) && !isalpha(*strCopy)) {
                *digit_ptr = *strCopy;
                digit_ptr++;
            }

            if (boolIndicator == 3) boolIndicator = -1;

            strCopy++;
        }

        boolIndicator++;
    }

    *digit_ptr = '\0';

    return result;
}

char* concatenate_strings(unsigned int seed, int num_strings, char* strings[]) {

    srand(seed);

    int length = 0;
    for (int i = 0; i < num_strings; i++) {
        length += strlen(strings[i]);
    }

    char* result = (char*)malloc(length * sizeof(char) + 1);

    if(result == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    char* p = result;

    for (int i = 0; i < num_strings; i++) {
        int index = rand() % num_strings;
        char* s = strings[index];

        while (*s != '\0') {
            *p = *s;
            s++;
            p++;
        }
    }

    *p = '\0';

    return result;
}

int main(int argc, char *argv[]) {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    char* result = NULL;

    if (argc > 2) {
        if(strchr("-/", argv[1][0]) == NULL) {
            printf("%s", errorMessages[INCORRECT_FLAG_INPUT]);
            return INCORRECT_FLAG_INPUT;
        }

        char flag = argv[1][1];
        char* str = argv[2];

        switch (flag) {
            case 'l':
                result = calculate_length(str);
                printf("Длина строки: %s\n", result);
                break;

            case 'r':
                result = reverse_string(str);
                printf("Строка после реверса: %s\n", result);
                break;

            case 'u':
                result = convert_to_uppercase(str);
                printf("Строка после конвертации: %s\n", result);
                break;

            case 'n':
                result = transform_string(str);
                printf("Строка после трансформации: %s\n", result);
                break;

            case 'c':
                if (argc >= 4) {
                    unsigned int seed = atoi(argv[3]);
                    int num_strings = argc - 3;
                    char* strings[num_strings];

                    strings[0] = argv[2];

                    for (int i = 1; i < num_strings; i++) {
                        strings[i] = argv[i + 3];
                    }

                    result = concatenate_strings(seed, num_strings, strings);
                    printf("Конкатинированная строка: %s\n", result);
                } else {
                    printf("%s", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
                    return INCORRECT_NUMBER_ARGUMENTS_INPUT;
                }
                break;
            default:
                printf("%s", errorMessages[INCORRECT_FLAG_INPUT]);
                return INCORRECT_FLAG_INPUT;
        }

        free(result);
    } else {
        printf("%s", errorMessages[INCORRECT_NUMBER_ARGUMENTS_INPUT]);
        return INCORRECT_NUMBER_ARGUMENTS_INPUT;
    }

    return SUCCESS;
}
