#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <string.h>
#include <stdarg.h>
#include <math.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_FLAG_INPUT,
    INCORRECT_INPUT_STRING,
    INCORRECT_ARGUMENTS_INPUT,
    FILE_OPENING_ERROR,
    FILE_READING_ERROR,
    FILE_CLOSING_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректный ввод флага, попробуйте ещё раз",
        "Неккоректная входная строка",
        "Некорректные аргументы, попробуйте ещё раз",
        "Ошибка открытия файла",
        "Ошибка чтения файла",
        "Ошибка закрытия файла",
        "Неизвестная ошибка, что-то пошло не так"
};

int convert_roman(char c) {
    switch (c) {
        case 'I': return 1;
        case 'V': return 5;
        case 'X': return 10;
        case 'L': return 50;
        case 'C': return 100;
        case 'D': return 500;
        case 'M': return 1000;
        default: return -1;
    }
}

int overfscanf(FILE* stream, const char* format, ...) {
    va_list args;
    va_start(args, format);

    int count = 0;
    int i = 0;
    while (format[i] != '\0') {
        if (format[i] == '%') {
            i++;
            switch (format[i]) {
                case 'R': {
                    char roman[1024], symbol;
                    int extra_str_len = 0;

                    while((symbol = fgetc(stream)) == ' ' || symbol == '\n') continue;

                    while( symbol != ' ' && symbol != EOF && symbol != '\n') {
                        roman[extra_str_len] = symbol;
                        if(strchr("IVXLCDM", roman[extra_str_len]) == NULL) return -1;
                        extra_str_len++;
                        symbol = fgetc(stream);
                    }

                    int length = strlen(roman);
                    int number = 0;
                    int prev_value = 0;

                    for (int j = length - 1; j >= 0; j--) {
                        int value = convert_roman(toupper(roman[j]));

                        if (value < prev_value) {
                            number -= value;
                        } else {
                            number += value;
                            prev_value = value;
                        }
                    }

                    int* result = va_arg(args, int*);
                    *result = number;
                    count++;
                    break;
                }
                case 'Z': {
                    char zendoforf[1024], symbol;
                    int extra_str_len = 0;

                    while((symbol = fgetc(stream)) == ' ' || symbol == '\n') continue;

                    while(symbol != ' ' && symbol != EOF && symbol != '\n') {
                        zendoforf[extra_str_len] = symbol;
                        if(strchr("01", zendoforf[extra_str_len]) == NULL) return -1;
                        extra_str_len++;
                        symbol = fgetc(stream);
                    }

                    if(zendoforf[extra_str_len-1] != '1') return -1;
                    else zendoforf[extra_str_len-1] = '\0';

                    int length = strlen(zendoforf);
                    int number = 0;
                    int fib1 = 1;
                    int fib2 = 0;

                    for (int j = 0; j <= length - 1; j++) {
                        int coefficient = zendoforf[j] - '0';
                        number += coefficient * fib1;
                        int temp = fib1;
                        fib1 = fib2 + fib1;
                        fib2 = temp;
                    }

                    int* result = va_arg(args, int*);
                    *result = number;
                    count++;
                    break;
                }
                case 'C': {
                    int* result = va_arg(args, int*);
                    int base = va_arg(args, int);

                    char number[1024], symbol;
                    int extra_str_len = 0;

                    while((symbol = fgetc(stream)) == ' ' || symbol == '\n') continue;

                    while(symbol != ' ' && symbol != EOF && symbol != '\n') {
                        number[extra_str_len] = symbol;
                        extra_str_len++;
                        symbol = fgetc(stream);
                    }

                    number[extra_str_len] = '\0';

                    int length = strlen(number);
                    int num = 0;
                    
                    int boolCnt = (format[i+1] == 'V') ? 1 : 0;

                    for (int j = length - 1; j >= 0; j--) {
                        int digit;
                        if (isalpha(number[j])) {
                            if(boolCnt && number[j] == tolower(number[j])) {
                                printf("Проверьте входной файл для перевода в дес. сист. счис! Необходимы только заглавные латинские буквы\n");
                                *result = -1;
                                count++;
                                exit(INCORRECT_INPUT_STRING);
                            } else if(!boolCnt && number[j] != tolower(number[j])) {
                                printf("Проверьте входной файл для перевода в дес. сист. счис! Необходимы только строчные латинские буквы\n");
                                *result = -1;
                                count++;
                                exit(INCORRECT_INPUT_STRING);
                            }
                            digit = tolower(number[j]) - 'a' + 10;
                        } else {
                            digit = number[j] - '0';
                        }

                        if (digit > base-1) return -1;

                        num += digit * pow(base, length - j - 1);
                    }

                    *result = num;
                    count++;
                    break;
                }
                default:
                    if (format[i] == toupper(format[i])) {
                        break;
                    } else {
                        int number;
                        fscanf(stream, "%d", &number);

                        int* result = va_arg(args, int*);
                        *result = number;
                        count++;
                        break;
                    }
            }
        } else {
            i++;
        }
    }

    va_end(args);
    return count;
}

int oversscanf(char* str, const char* format, ...) {
    va_list args;
    va_start(args, format);

    int count = 0, i = 0;

    while (format[i] != '\0') {
        if (format[i] == '%') {
            i++;
            switch (format[i]) {
                case 'R': {
                    char roman[1024];
                    int extra_str_len=0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        roman[extra_str_len] = *str;
                        if(strchr("IVXLCDM", roman[extra_str_len]) == NULL) return -1;
                        extra_str_len++;
                        str++;
                    }

                    int length = strlen(roman);
                    int number = 0;
                    int prevValue = 0;

                    for (int j = length - 1; j >= 0; j--) {
                        int value = convert_roman(toupper(roman[j]));

                        if (value < prevValue) {
                            number -= value;
                        } else {
                            number += value;
                            prevValue = value;
                        }
                    }

                    int* result = va_arg(args, int*);
                    *result = number;
                    count++;
                    break;
                }
                case 'Z': {
                    char zendoforf[1024];
                    int extra_str_len=0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        zendoforf[extra_str_len] = *str;
                        if(strchr("01", zendoforf[extra_str_len]) == NULL) return -1;
                        extra_str_len++;
                        str++;
                    }

                    if(zendoforf[extra_str_len-1] != '1') return -1;
                    else zendoforf[extra_str_len-1] = '\0';

                    int length = strlen(zendoforf);
                    int number = 0;
                    int fib1 = 1;
                    int fib2 = 0;

                    for (int j = 0; j <= length - 1; j++) {
                        int coefficient = zendoforf[j] - '0';
                        number += coefficient * fib1;
                        int temp = fib1;
                        fib1 = fib2 + fib1;
                        fib2 = temp;
                    }

                    int* result = va_arg(args, int*);
                    *result = number;
                    count++;
                    break;
                }
                case 'C': {
                    int* result = va_arg(args, int*);
                    int base = va_arg(args, int);

                    if(base < 2 || base > 36) base = 10;

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;


                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    int length = strlen(number);
                    int num = 0;

                    int boolCnt = (format[i+1] == 'V') ? 1 : 0;

                    for (int j = length - 1; j >= 0; j--) {
                        int digit;
                        if (isalpha(number[j])) {
                            if(boolCnt && number[j] == tolower(number[j])) {
                                printf("Проверьте входную строку для перевода в дес. сист. счис! Необходимы только заглавные латинские буквы\n");
                                *result = -1;
                                count++;
                                exit(INCORRECT_INPUT_STRING);
                            } else if(!boolCnt && number[j] != tolower(number[j])) {
                                printf("Проверьте входную строку для перевода в дес. сист. счис! Необходимы только строчные латинские буквы\n");
                                *result = -1;
                                count++;
                                exit(INCORRECT_INPUT_STRING);
                            }
                            digit = tolower(number[j]) - 'a' + 10;
                        } else {
                            digit = number[j] - '0';
                        }

                        if (digit > base-1) return -1;

                        num += digit * pow(base, length - j - 1);
                    }

                    *result = num;
                    count++;
                    break;
                }
                case 's': {
                    char* result = va_arg(args, char*);

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    strcpy(result, number);
                    count++;
                    break;
                }
                case 'd': {

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    int res;

                    if(!isdigit(number[0])) res = 0;
                    else res = atoi(number);

                    int* result = va_arg(args, int*);
                    *result = res;
                    count++;
                    break;
                }
                case 'i': {

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    int res;

                    if(!isdigit(number[0])) res = 0;
                    else res = atoi(number);

                    int* result = va_arg(args, int*);
                    *result = res;
                    count++;
                    break;
                }
                case 'x': {

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    for(int j=0; j<strlen(number); j++)
                        if(strchr("-1234567890abcdefABCDEF", number[j]) == NULL) return -1;

                    long res = strtol(number, NULL, 16);

                    int* result = va_arg(args, int*);
                    *result = res;
                    count++;
                    break;
                }
                case 'X': {

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    for(int j=0; j<strlen(number); j++)
                        if(strchr("1234567890abcdefABCDEF", number[j]) == NULL) return -1;

                    long res = strtol(number, NULL, 16);

                    int* result = va_arg(args, int*);
                    *result = res;
                    count++;
                    break;
                }
                case 'o': {

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    for(int j=0; j<strlen(number); j++)
                        if(strchr("-1234567", number[j]) == NULL) return -1;

                    long res = strtol(number, NULL, 8);

                    int* result = va_arg(args, int*);
                    *result = res;
                    count++;
                    break;
                }
                case 'c': {
                    char* result = va_arg(args, char*);

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    number[1] = '\0';

                    strcpy(result, number);
                    count++;
                    break;
                }
                case 'f': {
                    float* result = va_arg(args, float*);

                    char number[1024];
                    int extra_str_len = 0;

                    while(*str == ' ') str++;

                    while(*str != ' ') {
                        number[extra_str_len] = *str;
                        extra_str_len++;
                        str++;
                    }

                    *result = (float)atof(number);
                    count++;
                    break;
                }
                case 'l': {
                    if(format[i+1] == 'f') {
                        double *result = va_arg(args, double*);

                        char number[1024];
                        int extra_str_len = 0;

                        while (*str == ' ') str++;

                        while (*str != ' ') {
                            number[extra_str_len] = *str;
                            extra_str_len++;
                            str++;
                        }
//                        char * ptrEnd;
                        *result = strtod(number, NULL);
                        count++;
                        break;
                    } else return -1;
                }
                default:
                    if (format[i] == tolower(format[i])) {
                     break;
                    } else {
                        int number;
                        sscanf(str, "%d", &number);

                        int* result = va_arg(args, int*);
                        *result = number;
                     count++;
                     break;
                    }
            }
        } else {
            i++;
        }
    }

    va_end(args);

    return count;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    FILE *file = fopen("input.txt", "r");
    
    if (file == NULL) {
        printf("%s", errorMessages[FILE_OPENING_ERROR]);
        return FILE_OPENING_ERROR;
    }

    int num1, num2, num3, num4, isError;
    int extraChar;
    isError = overfscanf(file, "%Ro %Zr %CV", &num4, &num3, &num1, 16);

    if ( fclose (file) == EOF) {
        printf ("%s", errorMessages[FILE_CLOSING_ERROR]);
        return FILE_CLOSING_ERROR;
    }

    if(isError == -1) {
        printf("OVERFSCANF: %s\n", errorMessages[INCORRECT_ARGUMENTS_INPUT]);
        return INCORRECT_ARGUMENTS_INPUT;
    }

    printf("Num3: %d\n", num3);
    printf("Num4: %d\n", num4);
    printf("Num1: %d\n", num1);


    isError = oversscanf("MXVII 10100011 34 12354", "%Ro %Zr %Cv %o", &num1, &num2, &num3, 10, &extraChar);

    if(isError == -1) {
        printf("OVERSSCANF: %s\n", errorMessages[INCORRECT_ARGUMENTS_INPUT]);
        return INCORRECT_ARGUMENTS_INPUT;
    }

    printf("Num1: %d\n", num1);
    printf("Num2: %u\n", num2);
    printf("Num3: %d\n", num3);
    printf("Arg4: %o\n", extraChar);

    return SUCCESS;
}
