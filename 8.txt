#include <stdio.h>
#include <stdarg.h>
#include <stdlib.h>
#include <string.h>
#include <Windows.h>

typedef enum {
    SUCCESS = 0,
    INCORRECT_ARGUMENTS_INPUT,
    MEMORY_ALLOCATION_ERROR,
    UNKNOWN_ERROR
} ErrorCode;

static const char* errorMessages[] = {
        "Всё хорошо",
        "Некорректные аргументы, попробуйте ещё раз",
        "Ошибка выделения памяти",
        "Неизвестная ошибка, что-то пошло не так"
};

int convert_digit(char c) {
    if (c >= '0' && c <= '9') {
        return c - '0';
    } else if (c >= 'a' && c <= 'z') {
        return c - 'a' + 10;
    } else if (c >= 'A' && c <= 'Z') {
        return c - 'A' + 10;
    }

    return -1;
}

char convert_char(int digit) {
    if (digit >= 0 && digit <= 9) {
        return (char)('0' + digit);
    } else if (digit >= 10 && digit <= 35) {
        return (char)('a' + digit - 10);
    }

    return '\0';
}

char* add_strings(char* num1, char* num2, int base) {
    int len1 = strlen(num1);
    int len2 = strlen(num2);
    int count = 0;
    int max_len = len1 > len2 ? len1 : len2;

    char* num_sum = malloc(sizeof(char) * (max_len + 1));

    if(num_sum == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    char* res = malloc(sizeof(char) * (max_len + 1));

    if(res == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }
    int carry = 0, i, progress = 0;
    for (i = max_len - 1; i >= 0; --i) {
        int digit1 = (i-(max_len - 1 - (len1 - 1)) >= 0) ? convert_digit(num1[i-(max_len-1-(len1-1))]) : 0;
        int digit2 = (i-(max_len - 1 - (len2 - 1)) >= 0) ? convert_digit(num2[i-(max_len-1-(len2-1))]) : 0;
        int digit_sum = digit1 + digit2 + carry;
        if(digit_sum % base == 0 && digit_sum != 0) {
            num_sum[max_len - 1 - i] = '0'; num_sum[max_len - 1 - i + 1] = '1';
            count++; progress++;
            if(progress == max_len) count++;
        } else {
            num_sum[max_len - 1 - i] = convert_char(digit_sum % base);
            count++; progress++;
        }
        carry = digit_sum / base;
    }

    if(carry > 0) {
        num_sum[count] = convert_char(carry);
        count++;
    }

    for(i = 0; i < count; i++)
        res[i] = num_sum[count-1-i];

    int resultLength = 0;
    for(int j=0; j<strlen(res); j++) {
        if(isdigit(res[j])) resultLength++;
        else if(isalpha(res[j])) resultLength++;
        else break;
    }

    res[resultLength] = '\0';

    return res;
}

char* sum_numbers(int base, int count, ...) {
    va_list args;
    va_start(args, count);

    char *sum = (char*)malloc(sizeof(char) * 2);

    if(sum == NULL) {
        printf("%s", errorMessages[MEMORY_ALLOCATION_ERROR]);
        exit(MEMORY_ALLOCATION_ERROR);
    }

    sum[0] = '0'; sum[1] = '\0';

    for (int i = 0; i < count; ++i) {
        char* number = va_arg(args, char*);

        for(int j=0; j<strlen(number); j++) {
            if(convert_digit(number[j]) > base-1) {
                free(sum);
                return "ERR!";
            }
        }

        sum = add_strings(sum, number, base);
    }

    va_end(args);

    return sum;
}

int main() {
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    int base = 8;
    char* num1 = "223";
    char* num2 = "33";
    char* num3 = "76";

    char* result = sum_numbers(base, 3, num1, num2, num3);

    if (strcmp("ERR!", result) == 0) {
        printf("%s", errorMessages[INCORRECT_ARGUMENTS_INPUT]);
        return INCORRECT_ARGUMENTS_INPUT;
    } else printf("Результат: %s\n", result);

    free(result);

    return SUCCESS;
}
